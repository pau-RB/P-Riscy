//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Mon Sep 19 12:49:50 EDT 2022
//
// BVI format method schedule info:
// schedule wr  SBR ( wr );
//
// schedule rd1  CF ( rd1, rd2 );
// schedule rd1  SB ( wr );
//
// schedule rd2  CF ( rd1, rd2 );
// schedule rd2  SB ( wr );
//
//
// Ports:
// Name                         I/O  size props
// RDY_wr                         O     1 const
// rd1                            O    32
// RDY_rd1                        O     1 const
// rd2                            O    32
// RDY_rd2                        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wr_rindx                       I     5
// wr_data                        I    32 reg
// rd1_rindx                      I     5
// rd2_rindx                      I     5
// EN_wr                          I     1
//
// Combinational paths from inputs to outputs:
//   rd1_rindx -> rd1
//   rd2_rindx -> rd2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRFile(CLK,
	       RST_N,

	       wr_rindx,
	       wr_data,
	       EN_wr,
	       RDY_wr,

	       rd1_rindx,
	       rd1,
	       RDY_rd1,

	       rd2_rindx,
	       rd2,
	       RDY_rd2);
  input  CLK;
  input  RST_N;

  // action method wr
  input  [4 : 0] wr_rindx;
  input  [31 : 0] wr_data;
  input  EN_wr;
  output RDY_wr;

  // value method rd1
  input  [4 : 0] rd1_rindx;
  output [31 : 0] rd1;
  output RDY_rd1;

  // value method rd2
  input  [4 : 0] rd2_rindx;
  output [31 : 0] rd2;
  output RDY_rd2;

  // signals for module outputs
  reg [31 : 0] rd1, rd2;
  wire RDY_rd1, RDY_rd2, RDY_wr;

  // register rfile_0
  reg [31 : 0] rfile_0;
  wire [31 : 0] rfile_0_D_IN;
  wire rfile_0_EN;

  // register rfile_1
  reg [31 : 0] rfile_1;
  wire [31 : 0] rfile_1_D_IN;
  wire rfile_1_EN;

  // register rfile_10
  reg [31 : 0] rfile_10;
  wire [31 : 0] rfile_10_D_IN;
  wire rfile_10_EN;

  // register rfile_11
  reg [31 : 0] rfile_11;
  wire [31 : 0] rfile_11_D_IN;
  wire rfile_11_EN;

  // register rfile_12
  reg [31 : 0] rfile_12;
  wire [31 : 0] rfile_12_D_IN;
  wire rfile_12_EN;

  // register rfile_13
  reg [31 : 0] rfile_13;
  wire [31 : 0] rfile_13_D_IN;
  wire rfile_13_EN;

  // register rfile_14
  reg [31 : 0] rfile_14;
  wire [31 : 0] rfile_14_D_IN;
  wire rfile_14_EN;

  // register rfile_15
  reg [31 : 0] rfile_15;
  wire [31 : 0] rfile_15_D_IN;
  wire rfile_15_EN;

  // register rfile_16
  reg [31 : 0] rfile_16;
  wire [31 : 0] rfile_16_D_IN;
  wire rfile_16_EN;

  // register rfile_17
  reg [31 : 0] rfile_17;
  wire [31 : 0] rfile_17_D_IN;
  wire rfile_17_EN;

  // register rfile_18
  reg [31 : 0] rfile_18;
  wire [31 : 0] rfile_18_D_IN;
  wire rfile_18_EN;

  // register rfile_19
  reg [31 : 0] rfile_19;
  wire [31 : 0] rfile_19_D_IN;
  wire rfile_19_EN;

  // register rfile_2
  reg [31 : 0] rfile_2;
  wire [31 : 0] rfile_2_D_IN;
  wire rfile_2_EN;

  // register rfile_20
  reg [31 : 0] rfile_20;
  wire [31 : 0] rfile_20_D_IN;
  wire rfile_20_EN;

  // register rfile_21
  reg [31 : 0] rfile_21;
  wire [31 : 0] rfile_21_D_IN;
  wire rfile_21_EN;

  // register rfile_22
  reg [31 : 0] rfile_22;
  wire [31 : 0] rfile_22_D_IN;
  wire rfile_22_EN;

  // register rfile_23
  reg [31 : 0] rfile_23;
  wire [31 : 0] rfile_23_D_IN;
  wire rfile_23_EN;

  // register rfile_24
  reg [31 : 0] rfile_24;
  wire [31 : 0] rfile_24_D_IN;
  wire rfile_24_EN;

  // register rfile_25
  reg [31 : 0] rfile_25;
  wire [31 : 0] rfile_25_D_IN;
  wire rfile_25_EN;

  // register rfile_26
  reg [31 : 0] rfile_26;
  wire [31 : 0] rfile_26_D_IN;
  wire rfile_26_EN;

  // register rfile_27
  reg [31 : 0] rfile_27;
  wire [31 : 0] rfile_27_D_IN;
  wire rfile_27_EN;

  // register rfile_28
  reg [31 : 0] rfile_28;
  wire [31 : 0] rfile_28_D_IN;
  wire rfile_28_EN;

  // register rfile_29
  reg [31 : 0] rfile_29;
  wire [31 : 0] rfile_29_D_IN;
  wire rfile_29_EN;

  // register rfile_3
  reg [31 : 0] rfile_3;
  wire [31 : 0] rfile_3_D_IN;
  wire rfile_3_EN;

  // register rfile_30
  reg [31 : 0] rfile_30;
  wire [31 : 0] rfile_30_D_IN;
  wire rfile_30_EN;

  // register rfile_31
  reg [31 : 0] rfile_31;
  wire [31 : 0] rfile_31_D_IN;
  wire rfile_31_EN;

  // register rfile_4
  reg [31 : 0] rfile_4;
  wire [31 : 0] rfile_4_D_IN;
  wire rfile_4_EN;

  // register rfile_5
  reg [31 : 0] rfile_5;
  wire [31 : 0] rfile_5_D_IN;
  wire rfile_5_EN;

  // register rfile_6
  reg [31 : 0] rfile_6;
  wire [31 : 0] rfile_6_D_IN;
  wire rfile_6_EN;

  // register rfile_7
  reg [31 : 0] rfile_7;
  wire [31 : 0] rfile_7_D_IN;
  wire rfile_7_EN;

  // register rfile_8
  reg [31 : 0] rfile_8;
  wire [31 : 0] rfile_8_D_IN;
  wire rfile_8_EN;

  // register rfile_9
  reg [31 : 0] rfile_9;
  wire [31 : 0] rfile_9_D_IN;
  wire rfile_9_EN;

  // action method wr
  assign RDY_wr = 1'd1 ;

  // value method rd1
  always@(rd1_rindx or
	  rfile_0 or
	  rfile_1 or
	  rfile_2 or
	  rfile_3 or
	  rfile_4 or
	  rfile_5 or
	  rfile_6 or
	  rfile_7 or
	  rfile_8 or
	  rfile_9 or
	  rfile_10 or
	  rfile_11 or
	  rfile_12 or
	  rfile_13 or
	  rfile_14 or
	  rfile_15 or
	  rfile_16 or
	  rfile_17 or
	  rfile_18 or
	  rfile_19 or
	  rfile_20 or
	  rfile_21 or
	  rfile_22 or
	  rfile_23 or
	  rfile_24 or
	  rfile_25 or
	  rfile_26 or
	  rfile_27 or rfile_28 or rfile_29 or rfile_30 or rfile_31)
  begin
    case (rd1_rindx)
      5'd0: rd1 = rfile_0;
      5'd1: rd1 = rfile_1;
      5'd2: rd1 = rfile_2;
      5'd3: rd1 = rfile_3;
      5'd4: rd1 = rfile_4;
      5'd5: rd1 = rfile_5;
      5'd6: rd1 = rfile_6;
      5'd7: rd1 = rfile_7;
      5'd8: rd1 = rfile_8;
      5'd9: rd1 = rfile_9;
      5'd10: rd1 = rfile_10;
      5'd11: rd1 = rfile_11;
      5'd12: rd1 = rfile_12;
      5'd13: rd1 = rfile_13;
      5'd14: rd1 = rfile_14;
      5'd15: rd1 = rfile_15;
      5'd16: rd1 = rfile_16;
      5'd17: rd1 = rfile_17;
      5'd18: rd1 = rfile_18;
      5'd19: rd1 = rfile_19;
      5'd20: rd1 = rfile_20;
      5'd21: rd1 = rfile_21;
      5'd22: rd1 = rfile_22;
      5'd23: rd1 = rfile_23;
      5'd24: rd1 = rfile_24;
      5'd25: rd1 = rfile_25;
      5'd26: rd1 = rfile_26;
      5'd27: rd1 = rfile_27;
      5'd28: rd1 = rfile_28;
      5'd29: rd1 = rfile_29;
      5'd30: rd1 = rfile_30;
      5'd31: rd1 = rfile_31;
    endcase
  end
  assign RDY_rd1 = 1'd1 ;

  // value method rd2
  always@(rd2_rindx or
	  rfile_0 or
	  rfile_1 or
	  rfile_2 or
	  rfile_3 or
	  rfile_4 or
	  rfile_5 or
	  rfile_6 or
	  rfile_7 or
	  rfile_8 or
	  rfile_9 or
	  rfile_10 or
	  rfile_11 or
	  rfile_12 or
	  rfile_13 or
	  rfile_14 or
	  rfile_15 or
	  rfile_16 or
	  rfile_17 or
	  rfile_18 or
	  rfile_19 or
	  rfile_20 or
	  rfile_21 or
	  rfile_22 or
	  rfile_23 or
	  rfile_24 or
	  rfile_25 or
	  rfile_26 or
	  rfile_27 or rfile_28 or rfile_29 or rfile_30 or rfile_31)
  begin
    case (rd2_rindx)
      5'd0: rd2 = rfile_0;
      5'd1: rd2 = rfile_1;
      5'd2: rd2 = rfile_2;
      5'd3: rd2 = rfile_3;
      5'd4: rd2 = rfile_4;
      5'd5: rd2 = rfile_5;
      5'd6: rd2 = rfile_6;
      5'd7: rd2 = rfile_7;
      5'd8: rd2 = rfile_8;
      5'd9: rd2 = rfile_9;
      5'd10: rd2 = rfile_10;
      5'd11: rd2 = rfile_11;
      5'd12: rd2 = rfile_12;
      5'd13: rd2 = rfile_13;
      5'd14: rd2 = rfile_14;
      5'd15: rd2 = rfile_15;
      5'd16: rd2 = rfile_16;
      5'd17: rd2 = rfile_17;
      5'd18: rd2 = rfile_18;
      5'd19: rd2 = rfile_19;
      5'd20: rd2 = rfile_20;
      5'd21: rd2 = rfile_21;
      5'd22: rd2 = rfile_22;
      5'd23: rd2 = rfile_23;
      5'd24: rd2 = rfile_24;
      5'd25: rd2 = rfile_25;
      5'd26: rd2 = rfile_26;
      5'd27: rd2 = rfile_27;
      5'd28: rd2 = rfile_28;
      5'd29: rd2 = rfile_29;
      5'd30: rd2 = rfile_30;
      5'd31: rd2 = rfile_31;
    endcase
  end
  assign RDY_rd2 = 1'd1 ;

  // register rfile_0
  assign rfile_0_D_IN = wr_data ;
  assign rfile_0_EN = 1'b0 ;

  // register rfile_1
  assign rfile_1_D_IN = wr_data ;
  assign rfile_1_EN = EN_wr && wr_rindx == 5'd1 ;

  // register rfile_10
  assign rfile_10_D_IN = wr_data ;
  assign rfile_10_EN = EN_wr && wr_rindx == 5'd10 ;

  // register rfile_11
  assign rfile_11_D_IN = wr_data ;
  assign rfile_11_EN = EN_wr && wr_rindx == 5'd11 ;

  // register rfile_12
  assign rfile_12_D_IN = wr_data ;
  assign rfile_12_EN = EN_wr && wr_rindx == 5'd12 ;

  // register rfile_13
  assign rfile_13_D_IN = wr_data ;
  assign rfile_13_EN = EN_wr && wr_rindx == 5'd13 ;

  // register rfile_14
  assign rfile_14_D_IN = wr_data ;
  assign rfile_14_EN = EN_wr && wr_rindx == 5'd14 ;

  // register rfile_15
  assign rfile_15_D_IN = wr_data ;
  assign rfile_15_EN = EN_wr && wr_rindx == 5'd15 ;

  // register rfile_16
  assign rfile_16_D_IN = wr_data ;
  assign rfile_16_EN = EN_wr && wr_rindx == 5'd16 ;

  // register rfile_17
  assign rfile_17_D_IN = wr_data ;
  assign rfile_17_EN = EN_wr && wr_rindx == 5'd17 ;

  // register rfile_18
  assign rfile_18_D_IN = wr_data ;
  assign rfile_18_EN = EN_wr && wr_rindx == 5'd18 ;

  // register rfile_19
  assign rfile_19_D_IN = wr_data ;
  assign rfile_19_EN = EN_wr && wr_rindx == 5'd19 ;

  // register rfile_2
  assign rfile_2_D_IN = wr_data ;
  assign rfile_2_EN = EN_wr && wr_rindx == 5'd2 ;

  // register rfile_20
  assign rfile_20_D_IN = wr_data ;
  assign rfile_20_EN = EN_wr && wr_rindx == 5'd20 ;

  // register rfile_21
  assign rfile_21_D_IN = wr_data ;
  assign rfile_21_EN = EN_wr && wr_rindx == 5'd21 ;

  // register rfile_22
  assign rfile_22_D_IN = wr_data ;
  assign rfile_22_EN = EN_wr && wr_rindx == 5'd22 ;

  // register rfile_23
  assign rfile_23_D_IN = wr_data ;
  assign rfile_23_EN = EN_wr && wr_rindx == 5'd23 ;

  // register rfile_24
  assign rfile_24_D_IN = wr_data ;
  assign rfile_24_EN = EN_wr && wr_rindx == 5'd24 ;

  // register rfile_25
  assign rfile_25_D_IN = wr_data ;
  assign rfile_25_EN = EN_wr && wr_rindx == 5'd25 ;

  // register rfile_26
  assign rfile_26_D_IN = wr_data ;
  assign rfile_26_EN = EN_wr && wr_rindx == 5'd26 ;

  // register rfile_27
  assign rfile_27_D_IN = wr_data ;
  assign rfile_27_EN = EN_wr && wr_rindx == 5'd27 ;

  // register rfile_28
  assign rfile_28_D_IN = wr_data ;
  assign rfile_28_EN = EN_wr && wr_rindx == 5'd28 ;

  // register rfile_29
  assign rfile_29_D_IN = wr_data ;
  assign rfile_29_EN = EN_wr && wr_rindx == 5'd29 ;

  // register rfile_3
  assign rfile_3_D_IN = wr_data ;
  assign rfile_3_EN = EN_wr && wr_rindx == 5'd3 ;

  // register rfile_30
  assign rfile_30_D_IN = wr_data ;
  assign rfile_30_EN = EN_wr && wr_rindx == 5'd30 ;

  // register rfile_31
  assign rfile_31_D_IN = wr_data ;
  assign rfile_31_EN = EN_wr && wr_rindx == 5'd31 ;

  // register rfile_4
  assign rfile_4_D_IN = wr_data ;
  assign rfile_4_EN = EN_wr && wr_rindx == 5'd4 ;

  // register rfile_5
  assign rfile_5_D_IN = wr_data ;
  assign rfile_5_EN = EN_wr && wr_rindx == 5'd5 ;

  // register rfile_6
  assign rfile_6_D_IN = wr_data ;
  assign rfile_6_EN = EN_wr && wr_rindx == 5'd6 ;

  // register rfile_7
  assign rfile_7_D_IN = wr_data ;
  assign rfile_7_EN = EN_wr && wr_rindx == 5'd7 ;

  // register rfile_8
  assign rfile_8_D_IN = wr_data ;
  assign rfile_8_EN = EN_wr && wr_rindx == 5'd8 ;

  // register rfile_9
  assign rfile_9_D_IN = wr_data ;
  assign rfile_9_EN = EN_wr && wr_rindx == 5'd9 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rfile_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rfile_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (rfile_0_EN) rfile_0 <= `BSV_ASSIGNMENT_DELAY rfile_0_D_IN;
	if (rfile_1_EN) rfile_1 <= `BSV_ASSIGNMENT_DELAY rfile_1_D_IN;
	if (rfile_10_EN) rfile_10 <= `BSV_ASSIGNMENT_DELAY rfile_10_D_IN;
	if (rfile_11_EN) rfile_11 <= `BSV_ASSIGNMENT_DELAY rfile_11_D_IN;
	if (rfile_12_EN) rfile_12 <= `BSV_ASSIGNMENT_DELAY rfile_12_D_IN;
	if (rfile_13_EN) rfile_13 <= `BSV_ASSIGNMENT_DELAY rfile_13_D_IN;
	if (rfile_14_EN) rfile_14 <= `BSV_ASSIGNMENT_DELAY rfile_14_D_IN;
	if (rfile_15_EN) rfile_15 <= `BSV_ASSIGNMENT_DELAY rfile_15_D_IN;
	if (rfile_16_EN) rfile_16 <= `BSV_ASSIGNMENT_DELAY rfile_16_D_IN;
	if (rfile_17_EN) rfile_17 <= `BSV_ASSIGNMENT_DELAY rfile_17_D_IN;
	if (rfile_18_EN) rfile_18 <= `BSV_ASSIGNMENT_DELAY rfile_18_D_IN;
	if (rfile_19_EN) rfile_19 <= `BSV_ASSIGNMENT_DELAY rfile_19_D_IN;
	if (rfile_2_EN) rfile_2 <= `BSV_ASSIGNMENT_DELAY rfile_2_D_IN;
	if (rfile_20_EN) rfile_20 <= `BSV_ASSIGNMENT_DELAY rfile_20_D_IN;
	if (rfile_21_EN) rfile_21 <= `BSV_ASSIGNMENT_DELAY rfile_21_D_IN;
	if (rfile_22_EN) rfile_22 <= `BSV_ASSIGNMENT_DELAY rfile_22_D_IN;
	if (rfile_23_EN) rfile_23 <= `BSV_ASSIGNMENT_DELAY rfile_23_D_IN;
	if (rfile_24_EN) rfile_24 <= `BSV_ASSIGNMENT_DELAY rfile_24_D_IN;
	if (rfile_25_EN) rfile_25 <= `BSV_ASSIGNMENT_DELAY rfile_25_D_IN;
	if (rfile_26_EN) rfile_26 <= `BSV_ASSIGNMENT_DELAY rfile_26_D_IN;
	if (rfile_27_EN) rfile_27 <= `BSV_ASSIGNMENT_DELAY rfile_27_D_IN;
	if (rfile_28_EN) rfile_28 <= `BSV_ASSIGNMENT_DELAY rfile_28_D_IN;
	if (rfile_29_EN) rfile_29 <= `BSV_ASSIGNMENT_DELAY rfile_29_D_IN;
	if (rfile_3_EN) rfile_3 <= `BSV_ASSIGNMENT_DELAY rfile_3_D_IN;
	if (rfile_30_EN) rfile_30 <= `BSV_ASSIGNMENT_DELAY rfile_30_D_IN;
	if (rfile_31_EN) rfile_31 <= `BSV_ASSIGNMENT_DELAY rfile_31_D_IN;
	if (rfile_4_EN) rfile_4 <= `BSV_ASSIGNMENT_DELAY rfile_4_D_IN;
	if (rfile_5_EN) rfile_5 <= `BSV_ASSIGNMENT_DELAY rfile_5_D_IN;
	if (rfile_6_EN) rfile_6 <= `BSV_ASSIGNMENT_DELAY rfile_6_D_IN;
	if (rfile_7_EN) rfile_7 <= `BSV_ASSIGNMENT_DELAY rfile_7_D_IN;
	if (rfile_8_EN) rfile_8 <= `BSV_ASSIGNMENT_DELAY rfile_8_D_IN;
	if (rfile_9_EN) rfile_9 <= `BSV_ASSIGNMENT_DELAY rfile_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rfile_0 = 32'hAAAAAAAA;
    rfile_1 = 32'hAAAAAAAA;
    rfile_10 = 32'hAAAAAAAA;
    rfile_11 = 32'hAAAAAAAA;
    rfile_12 = 32'hAAAAAAAA;
    rfile_13 = 32'hAAAAAAAA;
    rfile_14 = 32'hAAAAAAAA;
    rfile_15 = 32'hAAAAAAAA;
    rfile_16 = 32'hAAAAAAAA;
    rfile_17 = 32'hAAAAAAAA;
    rfile_18 = 32'hAAAAAAAA;
    rfile_19 = 32'hAAAAAAAA;
    rfile_2 = 32'hAAAAAAAA;
    rfile_20 = 32'hAAAAAAAA;
    rfile_21 = 32'hAAAAAAAA;
    rfile_22 = 32'hAAAAAAAA;
    rfile_23 = 32'hAAAAAAAA;
    rfile_24 = 32'hAAAAAAAA;
    rfile_25 = 32'hAAAAAAAA;
    rfile_26 = 32'hAAAAAAAA;
    rfile_27 = 32'hAAAAAAAA;
    rfile_28 = 32'hAAAAAAAA;
    rfile_29 = 32'hAAAAAAAA;
    rfile_3 = 32'hAAAAAAAA;
    rfile_30 = 32'hAAAAAAAA;
    rfile_31 = 32'hAAAAAAAA;
    rfile_4 = 32'hAAAAAAAA;
    rfile_5 = 32'hAAAAAAAA;
    rfile_6 = 32'hAAAAAAAA;
    rfile_7 = 32'hAAAAAAAA;
    rfile_8 = 32'hAAAAAAAA;
    rfile_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkRFile

