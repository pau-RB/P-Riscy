//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_startPC  CF ( ifc_startPC, inverseIfc_startPC );
//
// schedule inverseIfc_startPC  CF ( ifc_startPC, inverseIfc_startPC );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_startPC                O     1
// inverseIfc_startPC             O    32
// RDY_inverseIfc_startPC         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_startPC_pc                 I    32
// EN_ifc_startPC                 I     1
// EN_inverseIfc_startPC          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFromHostInverterV(CLK,
			   RST_N,

			   ifc_startPC_pc,
			   EN_ifc_startPC,
			   RDY_ifc_startPC,

			   EN_inverseIfc_startPC,
			   inverseIfc_startPC,
			   RDY_inverseIfc_startPC);
  input  CLK;
  input  RST_N;

  // action method ifc_startPC
  input  [31 : 0] ifc_startPC_pc;
  input  EN_ifc_startPC;
  output RDY_ifc_startPC;

  // actionvalue method inverseIfc_startPC
  input  EN_inverseIfc_startPC;
  output [31 : 0] inverseIfc_startPC;
  output RDY_inverseIfc_startPC;

  // signals for module outputs
  wire [31 : 0] inverseIfc_startPC;
  wire RDY_ifc_startPC, RDY_inverseIfc_startPC;

  // ports of submodule inv_startPC_inverter
  wire [31 : 0] inv_startPC_inverter_get, inv_startPC_inverter_put;
  wire inv_startPC_inverter_EN_get,
       inv_startPC_inverter_EN_put,
       inv_startPC_inverter_RDY_get,
       inv_startPC_inverter_RDY_put;

  // action method ifc_startPC
  assign RDY_ifc_startPC = inv_startPC_inverter_RDY_put ;

  // actionvalue method inverseIfc_startPC
  assign inverseIfc_startPC = inv_startPC_inverter_get ;
  assign RDY_inverseIfc_startPC = inv_startPC_inverter_RDY_get ;

  // submodule inv_startPC_inverter
  PutInverter #(.DATA_WIDTH(32'd32)) inv_startPC_inverter(.CLK(CLK),
							  .RST(RST_N),
							  .put(inv_startPC_inverter_put),
							  .EN_put(inv_startPC_inverter_EN_put),
							  .EN_get(inv_startPC_inverter_EN_get),
							  .RDY_put(inv_startPC_inverter_RDY_put),
							  .get(inv_startPC_inverter_get),
							  .RDY_get(inv_startPC_inverter_RDY_get));

  // submodule inv_startPC_inverter
  assign inv_startPC_inverter_put = ifc_startPC_pc ;
  assign inv_startPC_inverter_EN_put = EN_ifc_startPC ;
  assign inv_startPC_inverter_EN_get = EN_inverseIfc_startPC ;
endmodule  // mkFromHostInverterV

