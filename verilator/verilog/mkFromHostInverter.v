//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_startPC  CF ( inverseIfc_startPC );
// schedule ifc_startPC  C ( ifc_startPC );
//
// schedule inverseIfc_startPC  CF ( ifc_startPC );
// schedule inverseIfc_startPC  C ( inverseIfc_startPC );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_startPC                O     1 reg
// inverseIfc_startPC             O    32 reg
// RDY_inverseIfc_startPC         O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_startPC_pc                 I    32 reg
// EN_ifc_startPC                 I     1
// EN_inverseIfc_startPC          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFromHostInverter(CLK,
			  RST_N,

			  ifc_startPC_pc,
			  EN_ifc_startPC,
			  RDY_ifc_startPC,

			  EN_inverseIfc_startPC,
			  inverseIfc_startPC,
			  RDY_inverseIfc_startPC);
  input  CLK;
  input  RST_N;

  // action method ifc_startPC
  input  [31 : 0] ifc_startPC_pc;
  input  EN_ifc_startPC;
  output RDY_ifc_startPC;

  // actionvalue method inverseIfc_startPC
  input  EN_inverseIfc_startPC;
  output [31 : 0] inverseIfc_startPC;
  output RDY_inverseIfc_startPC;

  // signals for module outputs
  wire [31 : 0] inverseIfc_startPC;
  wire RDY_ifc_startPC, RDY_inverseIfc_startPC;

  // ports of submodule fifo_startPC
  wire [31 : 0] fifo_startPC_D_IN, fifo_startPC_D_OUT;
  wire fifo_startPC_CLR,
       fifo_startPC_DEQ,
       fifo_startPC_EMPTY_N,
       fifo_startPC_ENQ,
       fifo_startPC_FULL_N;

  // action method ifc_startPC
  assign RDY_ifc_startPC = fifo_startPC_FULL_N ;

  // actionvalue method inverseIfc_startPC
  assign inverseIfc_startPC = fifo_startPC_D_OUT ;
  assign RDY_inverseIfc_startPC = fifo_startPC_EMPTY_N ;

  // submodule fifo_startPC
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_startPC(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(fifo_startPC_D_IN),
						       .ENQ(fifo_startPC_ENQ),
						       .DEQ(fifo_startPC_DEQ),
						       .CLR(fifo_startPC_CLR),
						       .D_OUT(fifo_startPC_D_OUT),
						       .FULL_N(fifo_startPC_FULL_N),
						       .EMPTY_N(fifo_startPC_EMPTY_N));

  // submodule fifo_startPC
  assign fifo_startPC_D_IN = ifc_startPC_pc ;
  assign fifo_startPC_ENQ = EN_ifc_startPC ;
  assign fifo_startPC_DEQ = EN_inverseIfc_startPC ;
  assign fifo_startPC_CLR = 1'b0 ;
endmodule  // mkFromHostInverter

