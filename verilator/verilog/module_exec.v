//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Mon Sep 19 12:49:46 EDT 2022
//
// BVI format method schedule info:
// schedule exec  CF ( exec );
//
//
// Ports:
// Name                         I/O  size props
// exec                           O    89
// exec_dInst                     I    75
// exec_rVal1                     I    32
// exec_rVal2                     I    32
// exec_pc                        I    32
// exec_ppc                       I    32
// exec_csrVal                    I    32
//
// Combinational paths from inputs to outputs:
//   (exec_dInst, exec_rVal1, exec_rVal2, exec_pc, exec_ppc, exec_csrVal) -> exec
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_exec(exec_dInst,
		   exec_rVal1,
		   exec_rVal2,
		   exec_pc,
		   exec_ppc,
		   exec_csrVal,
		   exec);
  // value method exec
  input  [74 : 0] exec_dInst;
  input  [31 : 0] exec_rVal1;
  input  [31 : 0] exec_rVal2;
  input  [31 : 0] exec_pc;
  input  [31 : 0] exec_ppc;
  input  [31 : 0] exec_csrVal;
  output [88 : 0] exec;

  // signals for module outputs
  wire [88 : 0] exec;

  // remaining internal signals
  reg [31 : 0] x__h263, x__h417;
  wire [65 : 0] IF_exec_dInst_BITS_74_TO_71_EQ_7_THEN_exec_csr_ETC___d34;
  wire [31 : 0] aluRes__h30,
		aluVal2__h29,
		brAddr__h36,
		exec_pc_PLUS_4___d11,
		x__h443;
  wire aluBr___d28;

  // value method exec
  assign exec =
	     { exec_dInst[74:71],
	       exec_dInst[63:58],
	       exec_dInst[45:33],
	       IF_exec_dInst_BITS_74_TO_71_EQ_7_THEN_exec_csr_ETC___d34 } ;

  // remaining internal signals
  module_alu instance_alu_1(.alu_a(exec_rVal1),
			    .alu_b(aluVal2__h29),
			    .alu_func(exec_dInst[70:67]),
			    .alu(aluRes__h30));
  module_aluBr instance_aluBr_0(.aluBr_a(exec_rVal1),
				.aluBr_b(exec_rVal2),
				.aluBr_brFunc(exec_dInst[66:64]),
				.aluBr(aluBr___d28));
  module_brAddrCalc instance_brAddrCalc_2(.brAddrCalc_pc(exec_pc),
					  .brAddrCalc_val(exec_rVal1),
					  .brAddrCalc_iType(exec_dInst[74:71]),
					  .brAddrCalc_imm(x__h443),
					  .brAddrCalc_taken(aluBr___d28),
					  .brAddrCalc(brAddr__h36));
  assign IF_exec_dInst_BITS_74_TO_71_EQ_7_THEN_exec_csr_ETC___d34 =
	     { x__h263, x__h417, brAddr__h36 != exec_ppc, aluBr___d28 } ;
  assign aluVal2__h29 = exec_dInst[32] ? exec_dInst[31:0] : exec_rVal2 ;
  assign exec_pc_PLUS_4___d11 = exec_pc + 32'd4 ;
  assign x__h443 = exec_dInst[31:0] ;
  always@(exec_dInst or
	  aluRes__h30 or
	  exec_rVal2 or
	  exec_pc_PLUS_4___d11 or exec_csrVal or exec_rVal1 or exec_pc)
  begin
    case (exec_dInst[74:71])
      4'd3: x__h263 = exec_rVal2;
      4'd4, 4'd5: x__h263 = exec_pc_PLUS_4___d11;
      4'd7: x__h263 = exec_csrVal;
      4'd8: x__h263 = exec_rVal1;
      4'd9: x__h263 = exec_pc + exec_dInst[31:0];
      default: x__h263 = aluRes__h30;
    endcase
  end
  always@(exec_dInst or brAddr__h36 or aluRes__h30)
  begin
    case (exec_dInst[74:71])
      4'd2, 4'd3: x__h417 = aluRes__h30;
      default: x__h417 = brAddr__h36;
    endcase
  end
endmodule  // module_exec

