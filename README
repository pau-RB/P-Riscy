############### Repo Setup ###############

1 - git submodule update --init --recursive

2 - Export BSC (Change to proper BSC installation directory)

	export BLUESPECDIR=/opt/tools/bsc/bsc-2022.01-ubuntu-20.04/lib/
	export PATH=/opt/tools/bsc/latest/bin:$PATH

3 - Build spike

4 - src/Config.bsv contains main configuration (need to recompile)

	- wb_ext_DEBUG  -> will print each commit through Connectal and compare to Spike

	- msg_ext_DEBUG -> will print stores into msg_ADDR through Connectal

	- msg_DEBUG     -> will print each commit through SystemVerilog simulation

	- perf_DEBUG    -> will print the state of the pipeline in every cycle through SystemVerilog simulation

	Debug through Connectal will affect performance.
	Debug through SystemVerilog simulation is not available in FPGA.

5 - Build tests:

		cd test

		make all

6 - Compile simulation:

	make build.verilator

7 - Compile FPGA:

	make build.vcu108


############### Build SPIKE ###############

1- Clone the spike repo

	git clone https://github.com/pau-RB/riscv-isa-sim

2- Create spike_install and build folders

	mkdir spike_install

	mkdir riscv-isa-sim/build

	cd riscv-isa-sim/build

3- Configure install

	../configure --with-isa=RV32I --prefix=$PWD/../../spike_install

	[--without-boost --without-boost-asio --without-boost-regex]

4- Build and install:

	make -j6

	make install

5- Default path for installation (if no --prefix is defined):
	
	/usr/local/bin/              -- spike binary

	/usr/local/include/          -- C/C++ includes

	/usr/local/lib/              -- .so libraruies


############### Add instruction to SPIKE ###############

1 - create riscv/insns/new_inst.h

2 - Add masks to riscv/encoding.h

3 - Add operation to riscv/opcodes.h

4 - Add to riscv_insn_ext_i  in  riscv/riscv.mk.in

5 - Add to disasm/disasm.cc

6 - Rebuild spike