// Generated by CIRCT firtool-1.40.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Repeater_3(
  input          clock,
                 reset,
                 io_repeat,	// src/main/scala/util/Repeater.scala:12:14
                 io_enq_valid,	// src/main/scala/util/Repeater.scala:12:14
  input  [2:0]   io_enq_bits_opcode,	// src/main/scala/util/Repeater.scala:12:14
                 io_enq_bits_param,	// src/main/scala/util/Repeater.scala:12:14
                 io_enq_bits_size,	// src/main/scala/util/Repeater.scala:12:14
  input  [4:0]   io_enq_bits_source,	// src/main/scala/util/Repeater.scala:12:14
  input  [31:0]  io_enq_bits_address,	// src/main/scala/util/Repeater.scala:12:14
  input  [511:0] io_enq_bits_data,	// src/main/scala/util/Repeater.scala:12:14
  input          io_enq_bits_corrupt,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_ready,	// src/main/scala/util/Repeater.scala:12:14
  output         io_enq_ready,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_valid,	// src/main/scala/util/Repeater.scala:12:14
  output [2:0]   io_deq_bits_opcode,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_param,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_size,	// src/main/scala/util/Repeater.scala:12:14
  output [4:0]   io_deq_bits_source,	// src/main/scala/util/Repeater.scala:12:14
  output [31:0]  io_deq_bits_address,	// src/main/scala/util/Repeater.scala:12:14
  output         io_deq_bits_user_amba_prot_bufferable,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_user_amba_prot_modifiable,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_user_amba_prot_readalloc,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_user_amba_prot_writealloc,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_user_amba_prot_privileged,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_user_amba_prot_secure,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_user_amba_prot_fetch,	// src/main/scala/util/Repeater.scala:12:14
  output [511:0] io_deq_bits_data,	// src/main/scala/util/Repeater.scala:12:14
  output         io_deq_bits_corrupt	// src/main/scala/util/Repeater.scala:12:14
);

  reg          full;	// src/main/scala/util/Repeater.scala:19:21
  reg  [2:0]   saved_opcode;	// src/main/scala/util/Repeater.scala:20:18
  reg  [2:0]   saved_param;	// src/main/scala/util/Repeater.scala:20:18
  reg  [2:0]   saved_size;	// src/main/scala/util/Repeater.scala:20:18
  reg  [4:0]   saved_source;	// src/main/scala/util/Repeater.scala:20:18
  reg  [31:0]  saved_address;	// src/main/scala/util/Repeater.scala:20:18
  reg          saved_user_amba_prot_bufferable;	// src/main/scala/util/Repeater.scala:20:18
  reg          saved_user_amba_prot_modifiable;	// src/main/scala/util/Repeater.scala:20:18
  reg          saved_user_amba_prot_readalloc;	// src/main/scala/util/Repeater.scala:20:18
  reg          saved_user_amba_prot_writealloc;	// src/main/scala/util/Repeater.scala:20:18
  reg          saved_user_amba_prot_privileged;	// src/main/scala/util/Repeater.scala:20:18
  reg          saved_user_amba_prot_secure;	// src/main/scala/util/Repeater.scala:20:18
  reg          saved_user_amba_prot_fetch;	// src/main/scala/util/Repeater.scala:20:18
  reg  [511:0] saved_data;	// src/main/scala/util/Repeater.scala:20:18
  reg          saved_corrupt;	// src/main/scala/util/Repeater.scala:20:18
  wire         _io_deq_valid_output = io_enq_valid | full;	// src/main/scala/util/Repeater.scala:19:21, :23:32
  wire         _io_enq_ready_output = io_deq_ready & ~full;	// src/main/scala/util/Repeater.scala:19:21, :24:{32,35}
  always @(posedge clock) begin
    automatic logic _T_1;	// src/main/scala/util/Repeater.scala:28:21
    _T_1 = _io_enq_ready_output & io_enq_valid & io_repeat;	// src/main/scala/util/Repeater.scala:24:32, :28:21
    if (reset)
      full <= 1'h0;	// src/main/scala/util/Repeater.scala:12:14, :19:21
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_T_1 | full);	// src/main/scala/util/Repeater.scala:19:21, :23:32, :28:{21,36,43}, :29:{21,24,36,43}
    if (_T_1) begin	// src/main/scala/util/Repeater.scala:28:21
      saved_opcode <= io_enq_bits_opcode;	// src/main/scala/util/Repeater.scala:20:18
      saved_param <= io_enq_bits_param;	// src/main/scala/util/Repeater.scala:20:18
      saved_size <= io_enq_bits_size;	// src/main/scala/util/Repeater.scala:20:18
      saved_source <= io_enq_bits_source;	// src/main/scala/util/Repeater.scala:20:18
      saved_address <= io_enq_bits_address;	// src/main/scala/util/Repeater.scala:20:18
      saved_data <= io_enq_bits_data;	// src/main/scala/util/Repeater.scala:20:18
      saved_corrupt <= io_enq_bits_corrupt;	// src/main/scala/util/Repeater.scala:20:18
    end
    saved_user_amba_prot_bufferable <= ~_T_1 & saved_user_amba_prot_bufferable;	// src/main/scala/util/Repeater.scala:20:18, :28:{21,36,60}
    saved_user_amba_prot_modifiable <= ~_T_1 & saved_user_amba_prot_modifiable;	// src/main/scala/util/Repeater.scala:20:18, :28:{21,36,60}
    saved_user_amba_prot_readalloc <= ~_T_1 & saved_user_amba_prot_readalloc;	// src/main/scala/util/Repeater.scala:20:18, :28:{21,36,60}
    saved_user_amba_prot_writealloc <= ~_T_1 & saved_user_amba_prot_writealloc;	// src/main/scala/util/Repeater.scala:20:18, :28:{21,36,60}
    saved_user_amba_prot_privileged <= ~_T_1 & saved_user_amba_prot_privileged;	// src/main/scala/util/Repeater.scala:20:18, :28:{21,36,60}
    saved_user_amba_prot_secure <= ~_T_1 & saved_user_amba_prot_secure;	// src/main/scala/util/Repeater.scala:20:18, :28:{21,36,60}
    saved_user_amba_prot_fetch <= ~_T_1 & saved_user_amba_prot_fetch;	// src/main/scala/util/Repeater.scala:20:18, :28:{21,36,60}
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:17];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h12; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        full = _RANDOM[5'h0][0];	// src/main/scala/util/Repeater.scala:19:21
        saved_opcode = _RANDOM[5'h0][3:1];	// src/main/scala/util/Repeater.scala:19:21, :20:18
        saved_param = _RANDOM[5'h0][6:4];	// src/main/scala/util/Repeater.scala:19:21, :20:18
        saved_size = _RANDOM[5'h0][9:7];	// src/main/scala/util/Repeater.scala:19:21, :20:18
        saved_source = _RANDOM[5'h0][14:10];	// src/main/scala/util/Repeater.scala:19:21, :20:18
        saved_address = {_RANDOM[5'h0][31:15], _RANDOM[5'h1][14:0]};	// src/main/scala/util/Repeater.scala:19:21, :20:18
        saved_user_amba_prot_bufferable = _RANDOM[5'h1][15];	// src/main/scala/util/Repeater.scala:20:18
        saved_user_amba_prot_modifiable = _RANDOM[5'h1][16];	// src/main/scala/util/Repeater.scala:20:18
        saved_user_amba_prot_readalloc = _RANDOM[5'h1][17];	// src/main/scala/util/Repeater.scala:20:18
        saved_user_amba_prot_writealloc = _RANDOM[5'h1][18];	// src/main/scala/util/Repeater.scala:20:18
        saved_user_amba_prot_privileged = _RANDOM[5'h1][19];	// src/main/scala/util/Repeater.scala:20:18
        saved_user_amba_prot_secure = _RANDOM[5'h1][20];	// src/main/scala/util/Repeater.scala:20:18
        saved_user_amba_prot_fetch = _RANDOM[5'h1][21];	// src/main/scala/util/Repeater.scala:20:18
        saved_data =
          {_RANDOM[5'h1][31:22],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10],
           _RANDOM[5'h11][21:0]};	// src/main/scala/util/Repeater.scala:20:18
        saved_corrupt = _RANDOM[5'h11][22];	// src/main/scala/util/Repeater.scala:20:18
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_enq_ready = _io_enq_ready_output;	// src/main/scala/util/Repeater.scala:24:32
  assign io_deq_valid = _io_deq_valid_output;	// src/main/scala/util/Repeater.scala:23:32
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_param = full ? saved_param : io_enq_bits_param;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_user_amba_prot_bufferable = full & saved_user_amba_prot_bufferable;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_user_amba_prot_modifiable = full & saved_user_amba_prot_modifiable;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_user_amba_prot_readalloc = full & saved_user_amba_prot_readalloc;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_user_amba_prot_writealloc = full & saved_user_amba_prot_writealloc;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_user_amba_prot_privileged = full & saved_user_amba_prot_privileged;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_user_amba_prot_secure = full & saved_user_amba_prot_secure;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_user_amba_prot_fetch = full & saved_user_amba_prot_fetch;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_data = full ? saved_data : io_enq_bits_data;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_corrupt = full ? saved_corrupt : io_enq_bits_corrupt;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
endmodule

