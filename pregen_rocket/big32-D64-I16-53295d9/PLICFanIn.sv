// Generated by CIRCT firtool-1.40.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module PLICFanIn(
  input  [1:0] io_prio_0,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_prio_1,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_ip,	// src/main/scala/devices/tilelink/Plic.scala:334:14
  output [1:0] io_dev,	// src/main/scala/devices/tilelink/Plic.scala:334:14
               io_max	// src/main/scala/devices/tilelink/Plic.scala:334:14
);

  wire [2:0] effectivePriority_0 = 3'h4;	// src/main/scala/devices/tilelink/Plic.scala:350:32
  wire [2:0] effectivePriority_1 = {io_ip[0], io_prio_0};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire [2:0] effectivePriority_2 = {io_ip[1], io_prio_1};	// src/main/scala/devices/tilelink/Plic.scala:350:{55,100}
  wire       _T = effectivePriority_1 < 3'h5;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100
  wire [2:0] _T_2 = _T ? 3'h4 : effectivePriority_1;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:{32,100}, src/main/scala/util/Misc.scala:35:9
  wire       _T_4 = _T_2 >= effectivePriority_2;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100, src/main/scala/util/Misc.scala:35:9
  wire [2:0] maxPri = _T_4 ? _T_2 : effectivePriority_2;	// src/main/scala/devices/tilelink/Plic.scala:346:20, :350:100, src/main/scala/util/Misc.scala:35:9
  wire [1:0] maxDev = _T_4 ? {1'h0, ~_T} : 2'h2;	// src/main/scala/devices/tilelink/Plic.scala:346:{20,57}, :350:32, src/main/scala/util/Misc.scala:35:36
  assign io_dev = maxDev;	// src/main/scala/util/Misc.scala:35:36
  assign io_max = maxPri[1:0];	// src/main/scala/devices/tilelink/Plic.scala:352:10, src/main/scala/util/Misc.scala:35:9
endmodule

