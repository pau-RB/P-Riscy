// Generated by CIRCT firtool-1.40.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module ALU(
  input  [3:0]  io_fn,	// src/main/scala/rocket/ALU.scala:56:14
  input  [31:0] io_in2,	// src/main/scala/rocket/ALU.scala:56:14
                io_in1,	// src/main/scala/rocket/ALU.scala:56:14
  output [31:0] io_out,	// src/main/scala/rocket/ALU.scala:56:14
                io_adder_out,	// src/main/scala/rocket/ALU.scala:56:14
  output        io_cmp_out	// src/main/scala/rocket/ALU.scala:56:14
);

  wire [31:0] in2_inv = {32{io_fn[3]}} ^ io_in2;	// src/main/scala/rocket/ALU.scala:43:29, :69:20
  wire [31:0] in1_xor_in2 = io_in1 ^ in2_inv;	// src/main/scala/rocket/ALU.scala:69:20, :70:28
  wire [31:0] _io_adder_out_output = io_in1 + in2_inv + {31'h0, io_fn[3]};	// src/main/scala/rocket/ALU.scala:43:29, :69:20, :71:36, :105:50
  wire        slt =
    io_in1[31] == io_in2[31]
      ? _io_adder_out_output[31]
      : io_fn[1] ? io_in2[31] : io_in1[31];	// src/main/scala/rocket/ALU.scala:45:35, :71:36, :75:{8,15,24,34,56}, :76:8
  wire [4:0]  shamt = io_in2[4:0];	// src/main/scala/rocket/ALU.scala:81:28
  wire        _shout_T = io_fn == 4'h5;	// src/main/scala/rocket/ALU.scala:89:24
  wire        _shout_T_1 = io_fn == 4'hB;	// src/main/scala/rocket/ALU.scala:89:50
  wire [7:0]  _GEN =
    {{io_in1[11:8], io_in1[15:14]} & 6'h33, 2'h0} | {io_in1[15:12], io_in1[19:16]}
    & 8'h33;	// src/main/scala/rocket/ALU.scala:89:83
  wire [18:0] _GEN_0 =
    {io_in1[5:4],
     io_in1[7:6],
     io_in1[9:8],
     _GEN,
     io_in1[19:18],
     io_in1[21:20],
     io_in1[23]} & 19'h55555;	// src/main/scala/rocket/ALU.scala:89:83
  wire [31:0] shin =
    _shout_T | _shout_T_1
      ? io_in1
      : {io_in1[0],
         io_in1[1],
         io_in1[2],
         io_in1[3],
         io_in1[4],
         _GEN_0[18:15] | {io_in1[7:6], io_in1[9:8]} & 4'h5,
         _GEN_0[14:7] | _GEN & 8'h55,
         _GEN[1],
         _GEN_0[5] | io_in1[18],
         io_in1[19],
         io_in1[20],
         {_GEN_0[2:0], 1'h0} | {io_in1[23:22], io_in1[25:24]} & 4'h5,
         io_in1[25],
         io_in1[26],
         io_in1[27],
         io_in1[28],
         io_in1[29],
         io_in1[30],
         io_in1[31]};	// src/main/scala/rocket/ALU.scala:89:{17,24,41,50,83}
  wire [32:0] _shout_r_T_5 = $signed($signed({io_fn[3] & shin[31], shin}) >>> shamt);	// src/main/scala/rocket/ALU.scala:43:29, :81:28, :89:17, :90:{21,41,47,70}
  wire [31:0] shout_r = _shout_r_T_5[31:0];	// src/main/scala/rocket/ALU.scala:90:{70,79}
  wire [7:0]  _GEN_1 =
    {{shout_r[11:8], shout_r[15:14]} & 6'h33, 2'h0} | {shout_r[15:12], shout_r[19:16]}
    & 8'h33;	// src/main/scala/rocket/ALU.scala:89:83, :90:79, :91:24
  wire [18:0] _GEN_2 =
    {shout_r[5:4],
     shout_r[7:6],
     shout_r[9:8],
     _GEN_1,
     shout_r[19:18],
     shout_r[21:20],
     shout_r[23]} & 19'h55555;	// src/main/scala/rocket/ALU.scala:89:83, :90:79, :91:24
  wire [31:0] shout_l =
    {shout_r[0],
     shout_r[1],
     shout_r[2],
     shout_r[3],
     shout_r[4],
     _GEN_2[18:15] | {shout_r[7:6], shout_r[9:8]} & 4'h5,
     _GEN_2[14:7] | _GEN_1 & 8'h55,
     _GEN_1[1],
     _GEN_2[5] | shout_r[18],
     shout_r[19],
     shout_r[20],
     {_GEN_2[2:0], 1'h0} | {shout_r[23:22], shout_r[25:24]} & 4'h5,
     shout_r[25],
     shout_r[26],
     shout_r[27],
     shout_r[28],
     shout_r[29],
     shout_r[30],
     shout_r[31]};	// src/main/scala/rocket/ALU.scala:89:{24,83}, :90:79, :91:24
  wire [31:0] shout =
    (_shout_T | _shout_T_1 ? shout_r : 32'h0) | (io_fn == 4'h1 ? shout_l : 32'h0);	// src/main/scala/rocket/ALU.scala:89:{24,50}, :90:79, :91:24, :92:{18,41,82}, :93:{18,25}
  wire        in2_not_zero = |io_in2;	// src/main/scala/rocket/ALU.scala:96:29
  wire        _logic_T_4 = io_fn == 4'h6;	// src/main/scala/rocket/ALU.scala:102:51
  wire [31:0] logic_0 =
    (io_fn == 4'h4 | _logic_T_4 ? in1_xor_in2 : 32'h0)
    | (_logic_T_4 | io_fn == 4'h7 ? io_in1 & io_in2 : 32'h0);	// src/main/scala/rocket/ALU.scala:70:28, :92:18, :102:{18,25,42,51,86}, :103:{18,41,50,75}
  wire [31:0] shift_logic = {31'h0, io_fn > 4'hB & slt} | logic_0 | shout;	// src/main/scala/rocket/ALU.scala:44:30, :75:8, :89:50, :92:82, :102:86, :105:{42,50,58}
  wire [31:0] out = io_fn == 4'h0 | io_fn == 4'hA ? _io_adder_out_output : shift_logic;	// src/main/scala/rocket/ALU.scala:71:36, :89:83, :105:58, :110:{16,23,40,49}
  assign io_out = out;	// src/main/scala/rocket/ALU.scala:110:16
  assign io_adder_out = _io_adder_out_output;	// src/main/scala/rocket/ALU.scala:71:36
  assign io_cmp_out = io_fn[0] ^ (io_fn[3] ? slt : in1_xor_in2 == 32'h0);	// src/main/scala/rocket/ALU.scala:43:29, :46:35, :70:28, :75:8, :77:{42,47,80}, :92:18
endmodule

